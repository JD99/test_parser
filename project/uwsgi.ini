[uwsgi]
# chdir = /var/www/project
strict = true
auto-procname = true
procname-prefix-spaced = test
# protocol = http
module = project.wsgi:application
enable-threads = true
# threads = $(GUNICORN_THREADS)
gevent = $(GUNICORN_THREADS)
gevent-monkey-patch = true
gevent-early-monkey-patch = true
socket = 0.0.0.0:8000
vacuum = true
master = true

disable-logging = True
die-on-term=true

single-interpreter = true
need-app = true

# Respawn processes that take more than ... seconds
harakiri = 600
harakiri-verbose = true
py-call-osafterfork = true


max-requests = 1000                  ; Перезапуск workers после этого количества запросов
max-worker-lifetime = 3600           ; Перезапуск workers через указанного количества секунд
reload-on-rss = 2048                 ; Перезапуск workers после потребление указанного количества памяти
worker-reload-mercy = 60             ; Время ожидания перед удалением workers

processes = $(GUNICORN_WORKERS)      ; Максимально допустимое количество workers
cheaper-algo = busyness
cheaper = $(GUNICORN_WORKERS_MIN)                           ; Минимально допустимое количество workers
cheaper-initial = $(GUNICORN_WORKERS_MIN)                  ; workers, созданные при запуске
cheaper-overload = 1                 ; Продолжительность цикла в секундах
cheaper-step = 1                     ; Сколько workers на spawn за один раз
cheaper-busyness-multiplier = 30     ; Сколько циклов ждать, прежде чем убивать workers
cheaper-busyness-min = 20            ; Ниже этого порога убивает workers (если стабильно для множителя циклов)
cheaper-busyness-max = 70            ; Выше этого порога порождаются новые workers
cheaper-busyness-backlog-alert = 16  ; Порождает аварийных workers, если в очереди ожидает больше этого количества запросов
cheaper-busyness-backlog-step = 2    ; Сколько аварийных workers будет создано, если в очереди слишком много запросов